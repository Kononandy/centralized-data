trouver le moyen de liée des wallet via debank à un dune de traitement premier 
décortiquer les data et les ordonner pour pouvoir traiter 2 différent algo 
 > 1 pour la vérifications des contract et la mise en page d'un ratio de risque noté de 1 à 10 
 > 1 pour un résumé épuré des actions prise ( entré et sortis ) 
 > for incentives need patnership
try to find IA to make it easier than build a team of degen
Less than 2 , in 5 years it's gonna be possible 
find new guys
ok
upside the front end on testnet
first view of possible to choice reward 
 import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

public class LiquidityPoolRewardContract extends Contract {

    public LiquidityPoolRewardContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        super("", contractAddress, web3j, credentials, gasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> setReward(BigInteger rewardAmount) {
        Function function = new Function(
                "setReward",
                Arrays.asList(new Uint256(rewardAmount)),
                Collections.emptyList()
        );

        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getReward() {
        Function function = new Function(
                "getReward",
                Collections.emptyList(),
                Arrays.asList(new TypeReference<Uint256>() {})
        );

        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static LiquidityPoolRewardContract deploy(Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) throws Exception {
        return deploy(LiquidityPoolRewardContract.class, web3j, credentials, gasProvider);
    }
}
first of all need to paid attention to nun-encrypted dev
everyday i forgot to write for us 
but still work on a upgrade 
i need a IArmy to make this possible kkk
